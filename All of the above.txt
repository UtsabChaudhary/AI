def vacuum_world():
    # initializing goal_state
    # 0 indicates Clean and 1 indicates Dirty
    goal_state = {'A': '0', 'B': '0'}
    cost = 0

    location_input = input("Enter Location of Vacuum (A or B): ").upper()  # Convert to uppercase
    status_input = input(f"Enter status of Room {location_input} (0 for Clean, 1 for Dirty): ")
    status_input_complement = input(f"Enter status of other room (0 for Clean, 1 for Dirty): ")

    if location_input == 'A':
        print("Vacuum is placed in Location A")
        if status_input == '1':
            print("Location A is Dirty.")
            goal_state['A'] = '0'
            cost += 1  # cost for suck
            print(f"Cost for CLEANING A: {cost}")
            print("Location A has been Cleaned.")

            if status_input_complement == '1':
                print("Location B is Dirty.")
                print("Moving right to the Location B.")
                cost += 1  # cost for moving right
                print(f"COST for moving RIGHT: {cost}")
                goal_state['B'] = '0'
                cost += 1  # cost for suck
                print(f"COST for SUCK: {cost}")
                print("Location B has been Cleaned.")
            else:
                print("No action. Location B is already clean.")
        else:
            print("Location A is already clean.")
            if status_input_complement == '1':
                print("Location B is Dirty.")
                print("Moving RIGHT to the Location B.")
                cost += 1  # cost for moving right
                print(f"COST for moving RIGHT: {cost}")
                goal_state['B'] = '0'
                cost += 1  # cost for suck
                print(f"Cost for SUCK: {cost}")
                print("Location B has been Cleaned.")
            else:
                print("No action. Location B is already clean.")
    else:
        print("Vacuum is placed in Location B")
        if status_input == '1':
            print("Location B is Dirty.")
            goal_state['B'] = '0'
            cost += 1  # cost for suck
            print(f"COST for CLEANING B: {cost}")
            print("Location B has been Cleaned.")
            if status_input_complement == '1':
                print("Location A is Dirty.")
                print("Moving LEFT to the Location A.")
                cost += 1  # cost for moving left
                print(f"COST for moving LEFT: {cost}")
                goal_state['A'] = '0'
                cost += 1  # cost for suck
                print(f"COST for SUCK: {cost}")
                print("Location A has been Cleaned.")
        else:
            print("Location B is already clean.")
            if status_input_complement == '1':
                print("Location A is Dirty.")
                print("Moving LEFT to the Location A.")
                cost += 1  # cost for moving left
                print(f"COST for moving LEFT: {cost}")
                goal_state['A'] = '0'
                cost += 1  # cost for suck
                print(f"COST for SUCK: {cost}")
                print("Location A has been Cleaned.")
            else:
                print("No action. Location A is already clean.")

    # done cleaning
    print("GOAL STATE: ")
    print(goal_state)
    print("Performance Measurement: " + str(cost))


vacuum_world()


---------------------------------------------------------

import random

print("Hello, You are welcome to hangman game to guess city name of Nepal")
print("\n")
words = ['nepalgunj', 'pokhara', 'bhojpur', 'birtamode', 'dhading']

word = random.choice(words)

print("Guess the characters:")

guessed_word = []
chances = 5

while chances > 0:
    failed = 0
    display_word = ""

    for char in word:
        if char in guessed_word:
            display_word += char
        else:
            display_word += "_"
            failed += 1

    print(display_word)

    if failed == 0:
        print("You Win.")
        print("The word is: ", word + '.')
        break

    guess = input("guess a character: ").lower()

    if guess in guessed_word:
        print("You already guessed that character.")
        continue

    guessed_word.append(guess)

    if guess not in word:
        chances -= 1
        print("Wrong")
        print("You have", chances, 'more guesses.')

        if chances == 0:
            print("You Lose.")
            print("The word was: ", word + '.')

------------------------------------------------------------

graph = {
  'a': ['b', 'c'],
  'b': ['d', 'e'],
  'c': ['f'],
  'f': [],
  'd': [],
  'e': []
}

def bfs(graph, start):
    visited = {}
    queue = [(start, 0)]  

    while queue:
        node, cost = queue.pop(0)

        if node not in visited:
            print(node, end=" ")
            visited[node] = cost  # Record the cost to reach this node

            for neighbour in graph[node]:
                if neighbour not in visited:
                    queue.append((neighbour, cost + 1))

    print("\nCost to reach each node:", visited)

print("Following is the Breadth-First Search")
bfs(graph, 'a')

------------------------------------------

graph = {
  'a': ['b', 'c'],
  'b': ['d', 'e'],
  'c': ['f'],
  'f': [],
  'd': [],
  'e': []
}

def dfs(graph, node, visited, cost, cost_to_node):
    if node not in visited:
        print(node)
        visited.add(node)
        cost_to_node[node] = cost
        for neighbour in graph[node]:
            dfs(graph, neighbour, visited, cost + 1, cost_to_node)

visited = set()
cost_to_node = {}

print("Following is the Depth-First Search with Cost Tracking")
dfs(graph, 'a', visited, 0, cost_to_node)

print("Cost to reach each node:", cost_to_node)

-----------------------------------------------------

from itertools import permutations

def is_solution(puzzle, mapping):
    sum1 = sum3 = 0
    for word in puzzle[0:len(puzzle)-1]:
        value = 0
        for letter in word:
            value = value * 10 + mapping[letter]
        sum1 += value
    for letter in puzzle[len(puzzle)-1]:
        sum3 = sum3 * 10 + mapping[letter]
    return sum1 == sum3

def solve_cryptarithmetic(puzzle):
    letters = set()
    for word in puzzle:
        for letter in word:
            letters.add(letter)
    letters = sorted(list(letters))
    for perm in permutations(range(10), len(letters)):
        mapping = {letters[i]: perm[i] for i in range(len(letters))}
        if all(mapping[word[0]] != 0 for word in puzzle) and is_solution(puzzle, mapping):
            return mapping
    return None

# Example usage:
puzzle = ['TWO', 'TWO', 'FOUR']
solution = solve_cryptarithmetic(puzzle)
if solution:
    print("Solution:")
    for word in puzzle:
        value = 0
        for letter in word:
            value = value * 10 + solution[letter]
        print(word, '=', value)
else:
    print("No solution found.")

-----------------------------------------------

def printMatrix(board, N):
    for i in range(N):
        for j in range(N):
            print(board[i][j], end=" ")
        print("")


def isSafe(board, row, col, N):
    for i in range(col):
        if board[row][i] == 1:
            return False

    for i, j in zip(range(row, -1, -1), range(col, -1, -1)):
        if board[i][j] == 1:
            return False

    for i, j in zip(range(row, N, 1), range(col, -1, -1)):
        if board[i][j] == 1:
            return False

    return True

def solveNQ(board, col, N):
    if col >= N:
        return True

    for i in range(N):
        if isSafe(board, i, col, N):
            board[i][col] = 1

            if solveNQ(board, col + 1, N) == True:
                return True
            board[i][col] = 0
    return False


def main():
    N = int(input("Enter size of the chessboard : "))
    board = [[0] * N for i in range(N)]

    if solveNQ(board, 0, N) == False:
        print("Solution does not exist")
        return False

    printMatrix(board, N)
    return True

if __name__=='__main__':
    main()

---------------------------------------------

def water_jug_problem():
    jug1_capacity = 4
    jug2_capacity = 3
    target_jug1 = 2
    target_jug2 = 0
    jug1 = 0
    jug2 = 0
    path = []

    while (jug1 != target_jug1 or jug2 != target_jug2):
        if jug1 == 0:
            jug1 = jug1_capacity
            path.append((jug1, jug2))
        elif jug2 == jug2_capacity:
            jug2 = 0
            path.append((jug1, jug2))
        elif jug1 > 0 and jug2 < jug2_capacity:
            pour_amount = min(jug1, jug2_capacity - jug2)
            jug1 -= pour_amount
            jug2 += pour_amount
            path.append((jug1, jug2))
        elif jug2 > 0:
            jug2 = 0
            path.append((jug1, jug2))

    return path

solution = water_jug_problem()
for state in solution:
    print(state)

--------------------------------------------------------------

#include <iostream>
#include <vector>
#include <string>

using namespace std;

vector<int> states = {0, 1, 2};
vector<vector<pair<char, int>>> transitions = {
    {{'0', 0}, {'1', 0}, {'0', 1}},  
    {{'1', 2}},                      
    {{}}};                           

bool simulate_nfa(string input)
{
    vector<int> current_states = {0};

    for (char c : input)
    {
        vector<int> next_states;
        for (int state : current_states)
        {
            for (auto transition : transitions[state])
            {
                if (transition.first == c)
                {
                    next_states.push_back(transition.second);
                }
            }
        }
        if (next_states.empty())
        {
            return false;
        }
        current_states = next_states;
    }

    for (int state : current_states)
    {
        if (state == 2)
        {
            return true;
        }
    }
    return false;
}

int main()
{
    string input;
    cout << "Enter a string to check: ";
    cin >> input;

    if (simulate_nfa(input))
    {
        cout << "String ends with 01." << endl;
    }
    else
    {
        cout << "String does not end with 01." << endl;
    }

    return 0;
}

----------------------------------------------------------

#include <iostream>
#include <vector>
#include <string>

using namespace std;

vector<int> states = {0, 1, 2, 3};
vector<vector<pair<char, int>>> transitions = {
    {{'0', 0}, {'1', 0}, {'1', 1}},
    {{'0', 2}},
    {{'1', 3}},
    {{'0', 3}, {'1', 3}}};

bool simulate_nfa(string input)
{
    vector<int> current_states = {0};

    for (char c : input)
    {
        vector<int> next_states;
        for (int state : current_states)
        {
            for (auto transition : transitions[state])
            {
                if (transition.first == c)
                {
                    next_states.push_back(transition.second);
                }
            }
        }
        if (next_states.empty())
        {
            return false;
        }
        current_states = next_states;
    }

    for (int state : current_states)
    {
        if (state == 3)
        {
            return true;
        }
    }
    return false;
}

int main()
{
    string input;
    cout << "Enter a binary string to check: ";
    cin >> input;

    if (simulate_nfa(input))
    {
        cout << "String contains substring '101'." << endl;
    }
    else
    {
        cout << "String does not contain substring '101'." << endl;
    }

    return 0;
}

--------------------------------------------------------------------

import os    
import time    
    
board = [' ',' ',' ',' ',' ',' ',' ',' ',' ',' ']    
player = 1    
   
########win Flags##########    
Win = 1    
Draw = -1    
Running = 0    
Stop = 1    
###########################    
Game = Running    
Mark = 'X'    
   
#This Function Draws Game Board    
def DrawBoard():    
    print(" %c | %c | %c " % (board[1],board[2],board[3]))    
    print("___|___|___")    
    print(" %c | %c | %c " % (board[4],board[5],board[6]))    
    print("___|___|___")    
    print(" %c | %c | %c " % (board[7],board[8],board[9]))    
    print("   |   |   ")    
   
#This Function Checks position is empty or not    
def CheckPosition(x):    
    if(board[x] == ' '):    
        return True    
    else:    
        return False    
   
#This Function Checks player has won or not    
def CheckWin():    
    global Game    
    #Horizontal winning condition    
    if(board[1] == board[2] and board[2] == board[3] and board[1] != ' '):    
        Game = Win    
    elif(board[4] == board[5] and board[5] == board[6] and board[4] != ' '):    
        Game = Win    
    elif(board[7] == board[8] and board[8] == board[9] and board[7] != ' '):    
        Game = Win    
    #Vertical Winning Condition    
    elif(board[1] == board[4] and board[4] == board[7] and board[1] != ' '):    
        Game = Win    
    elif(board[2] == board[5] and board[5] == board[8] and board[2] != ' '):    
        Game = Win    
    elif(board[3] == board[6] and board[6] == board[9] and board[3] != ' '):    
        Game=Win    
    #Diagonal Winning Condition    
    elif(board[1] == board[5] and board[5] == board[9] and board[5] != ' '):    
        Game = Win    
    elif(board[3] == board[5] and board[5] == board[7] and board[5] != ' '):    
        Game=Win    
    #Match Tie or Draw Condition    
    elif(board[1]!=' ' and board[2]!=' ' and board[3]!=' ' and board[4]!=' ' and board[5]!=' ' and board[6]!=' ' and board[7]!=' ' and board[8]!=' ' and board[9]!=' '):    
        Game=Draw    
    else:            
        Game=Running    
    
print("Tic-Tac-Toe Game:")    
print("Player 1 [X] --- Player 2 [O]\n")    
print()    
print()    
print("Please Wait...")    
time.sleep(3)    
while(Game == Running):    
    os.system('cls')    
    DrawBoard()    
    if(player % 2 != 0):    
        print("Player 1's chance")    
        Mark = 'X'    
    else:    
        print("Player 2's chance")    
        Mark = 'O'    
    choice = int(input("Enter the position between [1-9] where you want to mark : "))    
    if(CheckPosition(choice)):    
        board[choice] = Mark    
        player+=1    
        CheckWin()    
    
os.system('cls')    
DrawBoard()    
if(Game==Draw):    
    print("Game Draw")    
elif(Game==Win):    
    player-=1    
    if(player%2!=0):    
        print("Player 1 Won")    
    else:    
        print("Player 2 Won") 

--------------------------------------------------------

% Facts
is_graduating(ram).

% Rules
happy(X) :- is_graduating(X).
smiles(X) :- happy(X).

% Facts
is_equilateral(abc).

% Rules
is_isosceles(X) :- is_equilateral(X).
equal_sides_ab_ac(X) :- is_isosceles(X).
equal_angles_b_c(X) :- equal_sides_ab_ac(X).

% Facts
likes(ziggy, fish).
is_cat(ziggy).

% Rules
eats(X, Y) :-
    is_cat(X),
    likes(X, Y).

-------------------------------------------------------

#include <iostream>
#include <string>

class Person {
private:
    std::string name;
    std::string country;
    std::string dateOfBirth;
    int height;
    int weight;

public:
    Person(const std::string& n, const std::string& c, const std::string& dob, int h, int w)
        : name(n), country(c), dateOfBirth(dob), height(h), weight(w) {}

    void displayInformation() const {
        std::cout << "+------------------------------------------+" << std::endl;
        std::cout << "| Person |" << std::endl;
        std::cout << "|------------------------------------------|" << std::endl;
        std::cout << "| Name: " << name << std::endl;
        std::cout << "| Country: " << country << std::endl;
        std::cout << "| Date of Birth: " << dateOfBirth << std::endl;
        std::cout << "| Height: " << height << " Feet" << std::endl;
        std::cout << "| Weight: " << weight << " kg" << std::endl;
        std::cout << "+------------------------------------------+" << std::endl;
    }
};

class Employee {
private:
    std::string occupation;
    double salary;
    std::string company;
    std::string location;

public:
    Employee(const std::string& occ, double sal, const std::string& comp, const std::string& loc)
        : occupation(occ), salary(sal), company(comp), location(loc) {}

    void displayInformation() const {
        std::cout << "+------------------------------------------+" << std::endl;
        std::cout << "| Employee |" << std::endl;
        std::cout << "|------------------------------------------|" << std::endl;
        std::cout << "| Occupation: " << occupation << std::endl;
        std::cout << "| Salary: " << salary << " lakhs per month" << std::endl;
        std::cout << "| Company: " << company << std::endl;
        std::cout << "| Location: " << location << std::endl;
        std::cout << "+------------------------------------------+" << std::endl;
    }
};

int main() {
    Person* ram = new Person("Ram", "Nepal", "15th December 1999", 6, 80);
    Employee* ramJob = new Employee("AI Researcher", 1.5, "info company", "Kathmandu");

    ram->displayInformation();
    ramJob->displayInformation();

    delete ram;
    delete ramJob;

    return 0;
}

----------------------------------------------------

import numpy as np
import matplotlib.pyplot as plt

def estimate_coef(x, y):
  # number of observations/points
  n = np.size(x)

  # mean of x and y vector
  m_x = np.mean(x)
  m_y = np.mean(y)

  # calculating cross-deviation and deviation about x
  SS_xy = np.sum(y*x) - n*m_y*m_x
  SS_xx = np.sum(x*x) - n*m_x*m_x

  # calculating regression coefficients
  b_1 = SS_xy / SS_xx
  b_0 = m_y - b_1*m_x

  return (b_0, b_1)

def plot_regression_line(x, y, b):
  # plotting the actual points as scatter plot
  plt.scatter(x, y, color = "m",
      marker = "o", s = 30)

  # predicted response vector
  y_pred = b[0] + b[1]*x

  # plotting the regression line
  plt.plot(x, y_pred, color = "g")

  # putting labels
  plt.xlabel('x')
  plt.ylabel('y')

  # function to show plot
  plt.show()

def main():
  # observations / data
  x = np.array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9])
  y = np.array([1, 3, 2, 5, 7, 8, 8, 9, 10, 12])

  # estimating coefficients
  b = estimate_coef(x, y)
  print("Estimated coefficients:\nb_0 = {} \
    \nb_1 = {}".format(b[0], b[1]))

  # plotting regression line
  plot_regression_line(x, y, b)

if __name__ == "__main__":
  main()

---------------------------------------

# importing Python library
import numpy as np

# define Unit Step Function
def unitStep(v):
  if v >= 0:
    return 1
  else:
    return 0

# design Perceptron Model
def perceptronModel(x, w, b):
  v = np.dot(w, x) + b
  y = unitStep(v)
  return y

# AND Logic Function
# w1 = 1, w2 = 1, b = -1.5
def AND_logicFunction(x):
  w = np.array([1, 1])
  b = -1.5
  return perceptronModel(x, w, b)

# testing the Perceptron Model
test1 = np.array([0, 1])
test2 = np.array([1, 1])
test3 = np.array([0, 0])
test4 = np.array([1, 0])

print("AND({}, {}) = {}".format(0, 1, AND_logicFunction(test1)))
print("AND({}, {}) = {}".format(1, 1, AND_logicFunction(test2)))
print("AND({}, {}) = {}".format(0, 0, AND_logicFunction(test3)))
print("AND({}, {}) = {}".format(1, 0, AND_logicFunction(test4)))

----------------------------------------------------------------------

# Importing the required libraries
import numpy as np

# Defining the activation function
def activation_function(y):
    if y > 0:
        y = 1
    elif y <= 0:
        y = 0
    return y

# W = weights of the perceptron model
W = np.array([-1, -1])
# b = bias of the model
b = 1

# Defining the perceptron algorithm
def perceptron_algorithm(x):
    # y = w1x1 + w2x2 + b
    y = np.dot(W, x) + b
    # y = 1 if Wx+b > 0 else y = 0 
    y = activation_function(y)
    return y

# Input values to verify the NOR logic 
input1 = np.array([0, 0])
input2 = np.array([0, 1])
input3 = np.array([1, 0])
input4 = np.array([1, 1])


# Printing the results

print('NOR Logic: \n')
print(f'x1 = 0 and x2 = 0 => y = {perceptron_algorithm(input1)}')
print(f'x1 = 0 and x2 = 1 => y = {perceptron_algorithm(input2)}')
print(f'x1 = 1 and x2 = 0 => y = {perceptron_algorithm(input3)}')
print(f'x1 = 1 and x2 = 1 => y = {perceptron_algorithm(input4)}')

------------------------------------------------------------

# Importing the required libraries
import numpy as np

# Defining the activation function
def activation_function(y):
    if y >= 0:
        return 1
    else:
        return 0

# W = weights of the perceptron model
W = np.array([1, 1])
# b = bias of the model
b = -0.5  # Adjusted bias for OR gate

# Defining the perceptron algorithm
def perceptron_algorithm(x):
    # y = w1x1 + w2x2 + b
    y = np.dot(W, x) + b
    # y = 1 if Wx+b > 0 else y = 0 \
    y = activation_function(y)
    return y

# Input values to verify the OR logic 
input1 = np.array([0, 0])
input2 = np.array([0, 1])
input3 = np.array([1, 0])
input4 = np.array([1, 1])

# Printing the results
print('OR Logic: \n')
print(f'x1 = 0 and x2 = 0 => y = {perceptron_algorithm(input1)}')
print(f'x1 = 0 and x2 = 1 => y = {perceptron_algorithm(input2)}')
print(f'x1 = 1 and x2 = 0 => y = {perceptron_algorithm(input3)}')
print(f'x1 = 1 and x2 = 1 => y = {perceptron_algorithm(input4)}')